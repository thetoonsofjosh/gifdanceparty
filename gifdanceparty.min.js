var model = function() {
    var stage = window;
    return {
        ds: [{
            id: 1,
            n: "smooch",
            t: 330,
            l: 400,
            z: 500,
            h: 302,
            w: 234
        }, {
            id: 2,
            n: "pumpgirl",
            t: 380,
            l: 730,
            z: 501,
            h: 283,
            w: 221
        }],
        s: "twist",
        df: 2,
        i: 3,
        wn: [$(stage).height(), $(stage).width()],
        v: "1",
        wasLoaded: false,
        hasChanged: false,
        addDancer: function(d) {
            d.id = this.i;
            this.ds.push(d);
            this.i++;
            this.hasChanged = true;
            return d.id
        },
        removeDancer: function(id) {
            this.ds = _.without(this.ds, _.findWhere(this.ds, {
                id: id
            }));
            this.hasChanged = true
        },
        moveDancer: function(id, left, top) {
            var dancer = _.findWhere(this.ds, {
                id: id
            });
            dancer.t = top;
            dancer.l = left;
            this.hasChanged = true
        },
        resizeDancer: function(id, width, height) {
            var dancer = _.findWhere(this.ds, {
                id: id
            });
            dancer.w = width;
            dancer.h = height;
            this.hasChanged = true
        },
        changeZ: function(id, z) {
            _.findWhere(this.ds, {
                id: id
            }).z = z;
            this.hasChanged = true
        },
        setSong: function(songName) {
            this.s = songName;
            this.hasChanged = true
        },
        load: function(sharedModel) {
            this.wasLoaded = true;
            this.ds = sharedModel.ds;
            try {
                _.each(this.ds, function(d) {
                    d.id = parseInt(d.id);
                    d.l = parseInt(d.l);
                    d.t = parseInt(d.t)
                });
                this.i = parseInt(sharedModel.i);
                this.wn = [parseInt(sharedModel.wn[0]), parseInt(sharedModel.wn[1])]
            } catch (e) {}
            this.s = sharedModel.s;
            this.df = sharedModel.df;
            this.v = sharedModel.v
        },
        getShare: function() {
            this.wn = [$(stage).height(), $(stage).width()];
            return {
                ds: this.ds,
                s: this.s,
                df: this.df,
                i: this.i,
                wn: this.wn,
                v: this.v
            }
        },
        getTRatio: function() {
            return $(stage).height() / this.wn[0]
        },
        getLRatio: function() {
            return $(stage).width() / this.wn[1]
        }
    }
}();
var sharePath = "giphy.com/gifdanceparty";
var bitlyAccessToken = '94220288d7657a3eace62d0480ecb4c170cc0900';
(function($) {
    $.fn.liveDraggable = function(opts) {
        opts = opts || {};
        opts.drag = _.debounce(function(event, ui) {
            model.moveDancer($(event.target).data('id'), ui.position.left, ui.position.top)
        }, 300);
        this.live("mouseover", function() {
            if (!$(this).data("init")) {
                $(this).data("init", true).draggable(opts)
            }
        });
        return $()
    }
}(jQuery));
(function($) {
    $.fn.liveResizable = function(opts) {
        opts = opts || {};
        opts.resize = _.debounce(function(event, ui) {
            model.resizeDancer($(event.target).parent().data('id'), ui.size.width, ui.size.height)
        }, 300);
        this.live("mouseover", function() {
            if (!$(this).data("init")) {
                $(this).data("init", true).resizable(opts)
            }
        });
        return $()
    }
}(jQuery));
(function($) {
    $.fn.disableSelection = function() {
        return this.attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false)
    }
}
)(jQuery);
var bgNum = 2;
var bgMax = 5;
var zIndex = 500;
var zIndex_low = 499;
var onDancer = 0;
var s3_dir = "http://d16jfyletng9p5.cloudfront.net/gifdanceparty/";
$(window).load(function() {
    $("#modal_loading").hide();
    $("#menu_top").show();
    $(".dancer").liveResizable();
    $(".dance_outter").liveDraggable({
        scroll: false
    });
    var deep_link = $.deparam.querystring();
    if (_.has(deep_link, 'd')) {
        model.load(deep_link.d)
    }
    zIndex = _.max(model.ds, function(d) {
        return d.z
    }).z;
    $("body").backstretch(s3_dir + "dancefloors/dancefloor_0" + model.df + ".jpg");
    playSong(model.s);
    $("#select_song option[value='" + model.s + "']").attr("selected", "selected");
    _.each(model.ds, function(d) {
        var l = d.l = Math.floor(d.l * model.getLRatio());
        var t = d.t = Math.floor(d.t * model.getTRatio());
        $("#dancers").append("<div class='dance_outter' data-id='" + d.id + "' style='z-index:" + d.z + ";position:absolute;left:" + l + "px;top:" + t + "px;'><img class='dancer' src='" + s3_dir + "dancers/" + d.n + ".gif' height='" + d.h + "' width='" + d.w + "' /><div class='bfront'>FRONT</div><div class='bback'>BACK</div><div class='resize_help'>RESIZE</div><div class='close_dancer'>X</div></div>")
    });
    $(".dance_outter").each(function() {
        $(this).css("background-color", "rgba(20,20,20,0.0)");
        $(this).css("border", "none");
        $(this).children("div:not(:first-child)").hide()
    })
});
$(function() {
    $("#modal_loading").show();
    $("#menu_top").hide();
    $("#modal_about").hide();
    $("#modal_submit").hide();
    $("#modal_share").hide();
    $.fn.preload = function() {
        this.each(function() {
            $('<img/>')[0].src = this
        })
    }
    ;
    $([s3_dir + 'dancers/pedo_pickle.gif', s3_dir + 'dancers/nerd.gif', s3_dir + 'dancers/hula.gif', s3_dir + 'dancers/white_guy.gif', s3_dir + 'dancers/squid_word.gif', s3_dir + 'dancers/green_lady.gif', s3_dir + 'dancers/arnold.gif', s3_dir + 'dancers/kitty.gif', s3_dir + 'dancers/fatspidey.gif', s3_dir + 'dancers/fabio.gif', s3_dir + 'dancers/thehop.gif', s3_dir + 'dancers/apple.gif', s3_dir + 'dancers/bananabounce.gif', s3_dir + 'dancers/foreveralone.gif', s3_dir + 'dancers/pumpgirl.gif', s3_dir + 'dancers/smooch.gif', s3_dir + 'dancefloors/dancefloor_05.jpg', s3_dir + 'dancefloors/dancefloor_04.jpg', s3_dir + 'dancefloors/dancefloor_03.jpg', s3_dir + 'dancefloors/dancefloor_02.jpg', s3_dir + 'dancers/scumbag_brian.gif', s3_dir + 'dancers/humpery.gif', s3_dir + 'dancers/bmo.gif', s3_dir + 'dancers/lilguy.gif', s3_dir + 'dancers/bones.gif', s3_dir + 'dancers/the_wizard.gif', s3_dir + 'dancers/banana.gif', s3_dir + 'dancers/maranda.gif', s3_dir + 'dancers/carlton.gif', s3_dir + 'dancers/spongey_bob.gif', s3_dir + 'dancers/bear.gif', s3_dir + 'dancers/mid_aged.gif', s3_dir + 'dancers/roger.gif', s3_dir + 'dancers/noshorts.gif', s3_dir + 'dancers/fred.gif', s3_dir + 'dancers/charlie.gif', s3_dir + 'dancers/chicken.gif', s3_dir + 'dancers/doggy.gif', s3_dir + 'dancefloors/dancefloor_01.jpg']).preload()
});
function playSong(songName) {
    for (var i in buzz.sounds) {
        var soundID = buzz.sounds[i].get("id");
        if (soundID == songName) {
            buzz.sounds[i].play().setVolume(50)
        }
    }
}
$(function() {
    buzz.defaults.loop = true;
    buzz.defaults.formats = ['ogg', 'mp3'];
    buzz.defaults.preload = 'auto';
    buzz.defaults.autoplay = false;
    var fatboy = new buzz.sound(s3_dir + "music/fatboy");
    fatboy.set("id", "fatboy");
    var walkmen = new buzz.sound(s3_dir + "music/walkmen");
    walkmen.set("id", "walkmen");
    var nahnahnah = new buzz.sound(s3_dir + "music/nahnahnah");
    nahnahnah.set("id", "nahnahnah");
    var grounded = new buzz.sound(s3_dir + "music/grounded");
    grounded.set("id", "grounded");
    var twist = new buzz.sound(s3_dir + "music/twist");
    twist.set("id", "twist");
    var wegotyou = new buzz.sound(s3_dir + "music/wegotyou");
    wegotyou.set("id", "wegotyou");
    var bazz = new buzz.sound(s3_dir + "music/bazz");
    bazz.set("id", "bazz");
    var trololo = new buzz.sound(s3_dir + "music/trololo");
    trololo.set("id", "trololo");
    var bubblebutt = new buzz.sound(s3_dir + "music/bubblebutt");
    bubblebutt.set("id", "bubblebutt");
    var myGroup = new buzz.group([fatboy, walkmen, nahnahnah, grounded, twist, wegotyou, bazz, trololo, bubblebutt]);
    $('#select_song').on('change', function(e) {
        var song_name = $("#select_song").val();
        myGroup.stop();
        playSong(song_name);
        model.setSong(song_name)
    });
    $("#pause_button").click(function(event) {
        myGroup.stop()
    });
    $("#dancefloorswitch").click(function(event) {
        bgNum++;
        if (bgNum > bgMax) {
            bgNum = 1
        }
        var ext;
        if (bgNum == 6) {
            ext = ".gif"
        } else {
            ext = ".jpg"
        }
        $("body").backstretch(s3_dir + "dancefloors/dancefloor_0" + bgNum + ext);
        model.df = bgNum
    });
    $(document).on('mouseenter', '.dance_outter', function() {
        if (onDancer === 0) {
            $(this).css("background-color", "rgba(20,20,20,0.25)");
            $(this).css({
                "border-width": "1px",
                "border-style": "dashed",
                "border-color": "#ccc"
            });
            $(this).children("div:not(:first-child)").show();
            onDancer = 1
        } else {}
    });
    $(document).on('mouseleave', '.dance_outter', function() {
        $(this).css("background-color", "rgba(20,20,20,0.0)");
        $(this).css("border", "none");
        $(this).children("div:not(:first-child)").hide();
        onDancer = 0
    });
    $(document).on('click', '.close_dancer', function() {
        var deleted_element = $(this).closest(".dance_outter").remove();
        model.removeDancer(deleted_element.data('id'))
    });
    $(document).on('click', '.bfront', function() {
        var updated_element = $(this).closest(".dance_outter").css("z-index", zIndex);
        model.changeZ(updated_element.data('id'), zIndex);
        zIndex++
    });
    $(document).on('click', '.bback', function() {
        var updated_element = $(this).closest(".dance_outter").css("z-index", zIndex_low);
        model.changeZ(updated_element.data('id'), zIndex_low);
        zIndex_low--
    });
    $('#select_dancer').on('change', function(e) {
        var dancer_name = $("#select_dancer").val();
        if (dancer_name !== "") {
            var id = model.addDancer({
                n: dancer_name,
                t: 50,
                l: 20,
                z: zIndex++
            });
            $("#dancers").append("<div class='dance_outter' data-id='" + id + "' style='z-index:" + zIndex + ";top:50px;left:20px'><img class='dancer' src='" + s3_dir + "dancers/" + dancer_name + ".gif' /><div class='bfront'>FRONT</div><div class='bback'>BACK</div><div class='resize_help'>RESIZE</div><div class='close_dancer'>X</div></div>");
            $("#select_dancer").val("")
        }
    });
    $("#modal_about").hide();
    $("#modal_submit").hide();
    $("#modal_share").hide();
    $("#about").click(function() {
        $("#modal_about").show();
        $("#modal_submit").hide();
        $("#modal_share").hide()
    });
    $("#submit").click(function() {
        $("#modal_about").hide();
        $("#modal_submit").show();
        $("#modal_share").hide()
    });
    $("#share").click(function() {
        var path = 'http://' + (sharePath || window.location.host);
        var shareURL = path + '/?' + decodeURIComponent($.param({
            d: model.getShare()
        }));
        var bitlyCall = 'https://api-ssl.bitly.com/v3/shorten?access_token=' + bitlyAccessToken + '&domain=gph.is';
        var makeErrorShareUrl = function(shareURL) {
            $('#shareURL').html('').append($('<a></a>').attr('href', shareURL).html('right-click and select "copy link" option'))
        };
        var makeBitlyCall = function(bitlyCall) {
            $.ajax({
                dataType: "json",
                url: bitlyCall,
                success: function(data) {
                    if (data.status_code == "200") {
                        $('#shareURL').html('').append($("<a target='_blank'></a>").attr('href', data.data.url).html(data.data.url))
                    } else {
                        makeErrorShareUrl(shareURL)
                    }
                },
                error: function(a, b, c) {
                    makeErrorShareUrl(shareURL)
                }
            })
        };
        $('#shareURL').html('Gettin URL...');
        if (model.hasChanged) {
            bitlyCall += '&longUrl=' + encodeURIComponent(shareURL);
            makeBitlyCall(bitlyCall)
        } else if (model.wasLoaded && !model.hasChanged) {
            bitlyCall += '&longUrl=' + encodeURIComponent(window.location);
            makeBitlyCall(bitlyCall)
        } else {
            $('#shareURL').html('').append($('<a></a>').attr('href', path).html(path))
        }
        $("#modal_share").show();
        $("#modal_about").hide();
        $("#modal_submit").hide()
    });
    $("#close_modal_about").click(function() {
        $("#modal_about").hide()
    });
    $("#close_modal_submit").click(function() {
        $("#modal_submit").hide()
    });
    $("#close_modal_share").click(function() {
        $("#modal_share").hide()
    });
    $("#about").disableSelection();
    $("#submit").disableSelection();
    $("#playit").disableSelection();
    $("#addtoparty").disableSelection();
    $("#dancefloorswitch").disableSelection();
    $("#menu_top").disableSelection();
    $("#modal_about").disableSelection()
});